use std::collections::{HashMap, HashSet};

use dashmap::DashMap;
use meerkat::rule::Rule;
use meerkat::rule::Rule;
use ropey::Rope;
use serde::{Deserialize, Serialize};
use serde_json::Value;
use tower_lsp::jsonrpc::{ErrorCode, Result};
use tower_lsp::lsp_types::notification::Notification;
use tower_lsp::lsp_types::*;
use tower_lsp::{Client, LanguageServer, LspService, Server};
#[derive(Debug)]
struct Backend {
    client: Client,
    ast_map: DashMap<String, Vec<Rule>>,
    document_map: DashMap<String, Rope>,
    semantic_token_map: DashMap<String, Vec<ImCompleteSemanticToken>>,
}

#[tower_lsp::async_trait]
impl LanguageServer for Backend {
    async fn initialize(&self, _: InitializeParams) -> Result<InitializeResult> {
        Ok(InitializeResult {
            server_info: None,
            capabilities: ServerCapabilities {
                text_document_sync: Some(TextDocumentSyncCapability::Kind(
                    TextDocumentSyncKind::FULL,
                )),
                completion_provider: Some(CompletionOptions {
                    resolve_provider: Some(false),
                    trigger_characters: Some(vec!["(".to_string(), " ".to]),
                    work_done_progress_options: Default::default(),
                    all_commit_characters: None,
                }),
                execute_command_provider: Some(ExecuteCommandOptions {
                    commands: vec!["dummy.do_something".to_string()],
                    work_done_progress_options: Default::default(),
                }),

                workspace: Some(WorkspaceServerCapabilities {
                    workspace_folders: Some(WorkspaceFoldersServerCapabilities {
                        supported: Some(true),
                        change_notifications: Some(OneOf::Left(true)),
                    }),
                    file_operations: None,
                }),
                semantic_tokens_provider: Some(
                    SemanticTokensServerCapabilities::SemanticTokensRegistrationOptions(
                        SemanticTokensRegistrationOptions {
                            text_document_registration_options: {
                                TextDocumentRegistrationOptions {
                                    document_selector: Some(vec![DocumentFilter {
                                        language: Some("nrs".to_string()),
                                        scheme: Some("file".to_string()),
                                        pattern: None,
                                    }]),
                                }
                            },
                            semantic_tokens_options: SemanticTokensOptions {
                                work_done_progress_options: WorkDoneProgressOptions::default(),
                                legend: SemanticTokensLegend {
                                    token_types: LEGEND_TYPE.clone().into(),
                                    token_modifiers: vec![],
                                },
                                range: Some(true),
                                full: Some(SemanticTokensFullOptions::Bool(true)),
                            },
                            static_registration_options: StaticRegistrationOptions::default(),
                        },
                    ),
                ),
                // definition: Some(GotoCapability::default()),
                definition_provider: Some(OneOf::Left(true)),
                references_provider: Some(OneOf::Left(true)),
                rename_provider: Some(OneOf::Left(true)),
                ..ServerCapabilities::default()
            },
        })
    }
    async fn semantic_tokens_full(
        &self,
        params: SemanticTokensParams,
    ) -> Result<Option<SemanticTokensResult>> {
        let uri = params.text_document.uri.to_string();
        self.client
            .log_message(MessageType::LOG, "semantic_token_full")
            .await;
        let semantic_tokens = || -> Option<Vec<SemanticToken>> {
            let mut im_complete_tokens = self.semantic_token_map.get_mut(&uri)?;
            let rope = self.document_map.get(&uri)?;
            let ast = self.ast_map.get(&uri)?;
            let extends_tokens = semantic_token_from_ast(&ast);
            im_complete_tokens.extend(extends_tokens);
            im_complete_tokens.sort_by(|a, b| a.start.cmp(&b.start));
            let mut pre_line = 0;
            let mut pre_start = 0;
            let semantic_tokens = im_complete_tokens
                .iter()
                .filter_map(|token| {
                    let line = rope.try_byte_to_line(token.start as usize).ok()? as u32;
                    let first = rope.try_line_to_char(line as usize).ok()? as u32;
                    let start = rope.try_byte_to_char(token.start as usize).ok()? as u32 - first;
                    let delta_line = line - pre_line;
                    let delta_start = if delta_line == 0 {
                        start - pre_start
                    } else {
                        start
                    };
                    let ret = Some(SemanticToken {
                        delta_line,
                        delta_start,
                        length: token.length as u32,
                        token_type: token.token_type as u32,
                        token_modifiers_bitset: 0,
                    });
                    pre_line = line;
                    pre_start = start;
                    ret
                })
                .collect::<Vec<_>>();
            Some(semantic_tokens)
        }();
        if let Some(semantic_token) = semantic_tokens {
            return Ok(Some(SemanticTokensResult::Tokens(SemanticTokens {
                result_id: None,
                data: semantic_token,
            })));
        }
        Ok(None)
    }

    async fn semantic_tokens_range(
        &self,
        params: SemanticTokensRangeParams,
    ) -> Result<Option<SemanticTokensRangeResult>> {
        let uri = params.text_document.uri.to_string();
        let semantic_tokens = || -> Option<Vec<SemanticToken>> {
            let im_complete_tokens = self.semantic_token_map.get(&uri)?;
            let rope = self.document_map.get(&uri)?;
            let mut pre_line = 0;
            let mut pre_start = 0;
            let semantic_tokens = im_complete_tokens
                .iter()
                .filter_map(|token| {
                    let line = rope.try_byte_to_line(token.start as usize).ok()? as u32;
                    let first = rope.try_line_to_char(line as usize).ok()? as u32;
                    let start = rope.try_byte_to_char(token.start as usize).ok()? as u32 - first;
                    let ret = Some(SemanticToken {
                        delta_line: line - pre_line,
                        delta_start: if start >= pre_start {
                            start - pre_start
                        } else {
                            start
                        },
                        length: token.length as u32,
                        token_type: token.token_type as u32,
                        token_modifiers_bitset: 0,
                    });
                    pre_line = line;
                    pre_start = start;
                    ret
                })
                .collect::<Vec<_>>();
            Some(semantic_tokens)
        }();
        if let Some(semantic_token) = semantic_tokens {
            return Ok(Some(SemanticTokensRangeResult::Tokens(SemanticTokens {
                result_id: None,
                data: semantic_token,
            })));
        }
        Ok(None)
    }

    async fn initialized(&self, _: InitializedParams) {
        self.client
            .log_message(MessageType::INFO, "initialized!")
            .await;
    }

    async fn shutdown(&self) -> Result<()> {
        Ok(())
    }

    async fn references(&self, params: ReferenceParams) -> Result<Option<Vec<Location>>> {
        let reference_list = || -> Option<Vec<Location>> {
                   ï¿½      ï¿½  ï¿½  w                +       ï¿½   G   ï¿½:   ï¿½   Ö¸   G   G   ï¿½   ï¿½   Ö¸   G   ï¿½   I   ï¿½   Ö¸   G   ï¿½G   ï¿½o  G   ï¿½   Ö¸   G   ï¿½I   ï¿½   Ö¸   G   G   G   ï¿½   G   ï¿½   ï¿½   Ö¸   G   G   ï¿½   ï¿½   ï¿½ï¿½   ï¿½   ï¿½ï¿½   G   ï¿½ï¿½   ï¿½   Ö¸   G   ï¿½G   ï¿½o  ï¿½   Öµ	   ï¿½G
   ï¿½6   ï¿½   ï¿½   ï¿½"   ï¿½   G   ï¿½   ï¿½#   ï¿½#   6
   ï¿½ 9   o ï¿½ Ö¸   G   ï¿½G   ï¿½ï¿½ o ï¿½G   ï¿½h   o ï¿½+   ÖŸ 
`Pï¿½ ï¿½ (`Pï¿½ P-`Pï¿½ Bï¿½ P(ï¿½  ,(ï¿½ï¿½ï¿½ï¿½P''ï¿½ %ï¿½ï¿½ï¿½ï¿½P/
P)1P   `   `   -                         ï¿½   6   ï¿½  9   ï¿½   9   ï¿½   9   I   ÖŸ `P*(*ï¿½ P    ï¿½   ï¿½   i                       ï¿½ï¿½   Öµ    ï¿½   s Öµ    ï¿½   o ï¿½ ï¿½   ï¿½   ï¿½    ï¿½   ï¿½  s ï¿½#   ï¿½   ï¿½   G   ï¿½G   Û¶ ï¿½  s ï¿½   ÖŸ&`P*P$`P*Pï¿½ Pï¿½ P)P x   x   A                  
       ï¿½  6   ï¿½  G   ï¿½G   ï¿½o  G   9   ï¿½ 9   9   I   Ö¶  s  ÖŸ `P(/	P-(,`P(P  ï¿½   ï¿½   g                  	       ï¿½  G   ï¿½G   ï¿½o  ï¿½  ï¿½)   ï¿½   Ö¶  G   ï¿½  ï¿½   ï¿½   Ö¶  G   ï¿½   ï¿½   ï¿½   ï¿½  G   ï¿½   ï¿½	   ï¿½	   ï¿½ï¿½ `P/Pï¿½ -Q 8   8   
                         ï¿½  ï¿½ I   ÖŸ `P,P   ï¿½  ï¿½  ï¿½               @       ï¿½ï¿½   Öµ   ï¿½G   Û·   ï¿½  G   r Ö·   ï¿½   Ö·   ï¿½   ï¿½G   ï¿½   o ï¿½G   ï¿½o  I   Öµ    ï¿½   ï¿½   G   s Ö·   ï¿½   ï¿½G   ï¿½	   o ï¿½G   ï¿½o  I
   Ö·   ï¿½   G
   G   I   Ö·   pI
   Ö·   ï¿½   I   I   Ö·   I   Ö·   ï¿½    ï¿½   ï¿½G   ï¿½o  ï¿½G   ï¿½o     o I   Ö·   ï¿½    ï¿½   ï¿½G   ï¿½o  ï¿½G   ï¿½o     o I   Ö·   I   Ö·   ï¿½  G   G   I   Ö·   ï¿½  G   G   I   Öµ    ï¿½   o ï¿½G   Û·   G   o ï¿½G   ï¿½o   s  Ö²    ï¿½    .ï¿½'ï¿½ï¿½ï¿½    ï¿½Ö·   ï¿½G   ï¿½o  ï¿½G!   ï¿½"   o ï¿½G#   ï¿½h$   s ÖŸ&`Pï¿½ P$`P*`Pï¿½ 
P*
P)`Pï¿½ P$`Pï¿½ 
P*
P)`Pï¿½ `P-`Pï¿½ `P+`Pï¿½ P*
P(ï¿½ï¿½ï¿½ï¿½P)$`Pï¿½ P*
P(ï¿½ï¿½ï¿½ï¿½P)2`P+`Pï¿½ `Pï¿½ `P*Pï¿½ P*
P$P$`Pï¿½ `P+P/
P/P4 @P  x   x   F                         ï¿½  ï¿½G   ï¿½   o ï¿½+   ï¿½   Öµ    ï¿½   ï¿½  o ï¿½G   ï¿½h   o ï¿½   ÖŸ `Pï¿½ P?^/
P)4P @   @                            ï¿½    ï¿½  h   s ÖŸ `P.P$P  @   @                             ï¿½   ï¿½G   ï¿½s  ÖŸ `P,P$
P    T   T   %                          6   6   ï¿½   9   ï¿½   9   9   ï¿½ï¿½ `P%%	*/	Q ï¿½   ï¿½   D                        ï¿½ï¿½   Ö·   I   Ö·   ï¿½G   ï¿½s  Öµ    ï¿½   G   ï¿½   s Ö·   I   ÖŸ&`P+`P+P$`Pï¿½ P$`P+
P ï¿½   ï¿½   g                        ï¿½ï¿½   Ö·   G   ï¿½G   Û·   G   o ï¿½+   ï¿½   ï¿½   G   ï¿½G   Û·   G   s ï¿½   ï¿½	   ï¿½   ï¿½G   ï¿½s  ï¿½   ÖŸ&`Pï¿½ Pï¿½ Pï¿½ P)P |  |  &               !        ï¿½ï¿½   Ö·   ï¿½   Ö·   ï¿½   ï¿½  ï¿½   Ö·   G   ï¿½(   ï¿½   Öµ    ï¿½   G   s Ö·   I   ï¿½	   Ö²   ï¿½   Öµ    ï¿½   G      s Ö·   G   ï¿½"   ï¿½   Öµ    ï¿½   G   	   o ï¿½   Ö·   G
   ï¿½"   ï¿½   Öµ    ï¿½   G   ï¿½   o ï¿½   Ö·   G
   ï¿½G   Û·   G   s Ö·   ï¿½   ï¿½G   ï¿½h   ï¿½o I   ï¿½!   ÖŸ&	`P*`Pï¿½ ï¿½ 
_$ï¿½ ,ï¿½P$ï¿½ 	P)ï¿½ 	P)ï¿½ P$ï¿½ P.TP  ï¿½   ï¿½   _                  
        ï¿½   I   Ö¸   G   ï¿½#   ï¿½   Öµ    ï¿½   G      o ï¿½   Ö¸   G   ï¿½G   Û¸   G   s ÖŸ `P,`Pï¿½ P)`Pï¿½ P$P @   @                          ï¿½ï¿½   Ö·   ï¿½  I   ÖŸ&`P-P          l        	       H       ï¿½ï¿½   Ö·   ï¿½   Ö·   ï¿½   ï¿½K  ï¿½   Ö·   ï¿½G   ï¿½s  Ö·   ï¿½G   Ûµ   6   ï¿½   9   s Öµ   ï¿½   ï¿½
   Öµ   ï¿½G   ï¿½o  ï¿½   Ö²   ï¿½   ï¿½   Ö·   G	   ï¿½(   ï¿½   Öµ
    ï¿½   G	   s Ö·   I	   ï¿½   Öµ    ï¿½   o ï¿½   ï¿½   Öµ    ï¿½   o ï¿½   Ö·   G
   ï¿½G   Û·   G   s Öµ    ï¿½   G      s Öµ    ï¿½   G      s ï¿½ï¿½   G   ï¿½ï¿½   ï¿½,   ï¿½   ï¿½   ï¿½G   Û·   G   ï¿½G   Û·   o ï¿½   G   o I   Ö·   G   ï¿½3   ï¿½6   Ö·   G   ï¿½G   Û·   G   h   o ï¿½:   ï¿½+   ï¿½:   ï¿½   G   ï¿½G   Û·   G   h   s ï¿½>   Ö¶  ï¿½   ï¿½?   Ö¶  ï¿½    ï¿½A   ï¿½   ï¿½B   ï¿½    ï¿½  o ï¿½   ï¿½D   ï¿½D   ï¿½  Ö·   G    ï¿½G
   Û·   G   ï¿½  o ï¿½H   ÖŸ&
`P*`Pï¿½ +P$ï¿½ *ï¿½ï¿½ï¿½ï¿½P$ ï¿½ 
P)/ï¿½ 
_$ï¿½ [ï¿½ P)
ï¿½ P$ï¿½P$ï¿½P$ï¿½ ï¿½ "P,ï¿½ï¿½ï¿½ï¿½P),ï¿½ :""#ï¿½ï¿½ï¿½ï¿½Pï¿½ KP)*ï¿½0[-
+ï¿½ P)P  @   @                             ï¿½   ï¿½G   ï¿½o  ï¿½ï¿½ `P,	P#Q    @   @                             ï¿½   ï¿½G   ï¿½o  ï¿½ï¿½ `P,	P#Q    ï¿½  ï¿½  r               0        ï¿½ï¿½  Ö·  G   ï¿½]  ï¿½   ï¿½  G   ï¿½(   ï¿½   Öµ    ï¿½  G   s Ö·  I   ï¿½   Ö·  ï¿½G   ï¿½s  Ö·  G   ï¿½  G   G   ï¿½'   ï¿½   Ö·  G   ï¿½G   Û·  G   o ï¿½   Öµ	   ï¿½G   Û·  G   s Ö·  G   ï¿½G
   Û·  G   s Ö²   ï¿½   .ï¿½(ï¿½ï¿½ï¿½   ï¿½ï¿½ï¿½   ï¿½Q   ï¿½#   ï¿½	   ï¿½   Ö·   G   ï¿½"   ï¿½&   Ö·   G   ï¿½G   Û·   o ï¿½)   Ö²	   ï¿½	   Ö‘+   ï¿½
   G   G   ï¿½G   Û·  r Ö‘0   ï¿½&`Pï¿½ `Pï¿½ 
_$ï¿½ `P+P$`Pï¿½ %P)`Pï¿½ P$`Pï¿½ P$`Pï¿½ `Pï¿½ `P*`Pï¿½ !P)`Pï¿½ 
`Pï¿½ P)P          ï¿½                        ï¿½ï¿½  Ö·  G   ï¿½ï¿½   ï¿½   ï¿½  I   Öµ   ï¿½Z   ï¿½   ï¿½   ï¿½G   ï¿½   o ï¿½   Ö·      I   Öµ   G   ï¿½G	   Û·   s Ö²   ï¿½   ï¿½   Ö‘   ï¿½  G
   ï¿½G	   Û·  G   s Öµ   ï¿½G	   Û·  G   s Ö‘   ï¿½&`Pï¿½ `P+`P/
`Pï¿½ 	P(`P/`Pï¿½ P$`Pï¿½ `Pï¿½ P$`Pï¿½ P)P  <   <                           ï¿½ï¿½   Ö·   G   ï¿½ï¿½&`P)Q   <   <                           ï¿½ï¿½   Ö·   G   ï¿½ï¿½&`P)Q   <   <                           ï¿½ï¿½   Ö·   G   ï¿½ï¿½&`P)Q   <   <                           ï¿½ï¿½   Ö·   G   ï¿½ï¿½&`P)Q   <   <                           ï¿½ï¿½   Ö·   G   ï¿½ï¿½&`P)Q   ï¿½   ï¿½   ^                        ï¿½   ï¿½S   ï¿½   ï¿½   [ï¿½   \]ï¿½)   ï¿½   ï¿½   ï¿½   ï¿½   ï¿½   ï¿½   HKï¿½Ö“ï¿½ï¿½ï¿½ï¿½ï¿½	   ^ï¿½   ï¿½   Ö‘   ï¿½ `P/`Pï¿½ ï¿½ï¿½ï¿½ï¿½$`Pï¿½ ï¿½ï¿½ï¿½ï¿½,%`Pï¿½ 	P ï¿½            1   \   \   2                         ï¿½  ï¿½   !ï¿½   ï¿½   ï¿½   ï¿½  HHï¿½
   ï¿½   ï¿½  ï¿½   ï¿½ï¿½ `Pï¿½ Q   ï¿½  ~        	       e      %ï¿½ï¿½  Ö¶ ï¿½   ï¿½  ï¿½   ï¿½ ï¿½   ï¿½   ï¿½ï¿½ G   ï¿½   ï¿½ï¿½   ï¿½   ï¿½   Ö’   ï¿½   ï¿½ï¿½   ï¿½   ï¿½ ï¿½   Hï¿½  ï¿½   ï¿½  ï¿½D   ï¿½
   ï¿½   ï¿½  ï¿½   ï¿½   ï¿½   ï¿½  ï¿½
   ï¿½   ï¿½   ï¿½   ï¿½  ï¿½   ï¿½   ï¿½   ï¿½   Ö“7   ï¿½   ï¿½   .ï¿½'ï¿½   ï¿½Ö“bï¿½ï¿½ï¿½ï¿½   ï¿½   Ö“   ï¿½   ï¿½   Ö‘   ï¿½   ï¿½   Ö‘   ï¿½   ï¿½   ï¿½   ï¿½   |   ï¿½  } ï¿½ï¿½   ï¿½  ï¿½ ï¿½   ï¿½   ï¿½ ï¿½G   ï¿½o  ï¿½   ï¿½   ï¿½   I	   Ö·  ï¿½ ï¿½   ï¿½   ï¿½ï¿½   I
   Ö·  (I   Ö·  I   Ö·  I
   Ö·  I   Ö·  ï¿½  I   I   Ö·  ï¿½  I   I   Ö·  ï¿½     I   I   Ö·  ï¿½   G   I   Ö·     I   Ö·  I   Ö·  I   Ö·  c    I   Ö·  ï¿½  I   I   Ö·  I   Ö·  I    ï¿½!   ï¿½  ï¿½ï¿½  ï¿½5   ï¿½  ï¿½ï¿½           ï¿½5   ï¿½"    ï¿½  ï¿½   G#   s Ö“ï¿½  ï¿½9   ï¿½"    ï¿½  ï¿½   G$   s Ö“ï¿½  ï¿½=   ï¿½"    ï¿½  ï¿½   G%   s Ö“a  ï¿½A   ï¿½   G&   ï¿½  ï¿½c   '   d    ï¿½ Öµ(   ï¿½  G	   ï¿½   ï¿½G   Öµ   G)   ï¿½I   Hï¿½ ï¿½ï¿½   ï¿½K   ï¿½ Hï¿½ ï¿½ï¿½ ï¿½`   ï¿½O   ï¿½ ï¿½G*   ï¿½+   s ï¿½ï¿½   Ö’Q   ï¿½   ï¿½ ï¿½/   ï¿½S   ï¿½ ï¿½G*   ï¿½'   s Ö·   .ï¿½'ï¿½   ï¿½Ö“ï¿½ï¿½ï¿½ï¿½ï¿½W   ï¿½  ï¿½G,   ï¿½g-   ï¿½ ï¿½G.   ï¿½   o o ï¿½  Ö‘[   ï¿½"    ï¿½  ï¿½  s Ö“L   ï¿½]   ï¿½/    ï¿½  s Ö“3   ï¿½_   ï¿½/    ï¿½  s Ö“   ï¿½a   ï¿½0    1   o ï¿½ï¿½c   ï¿½   ï¿½c   ï¿½"    ï¿½  ï¿½  s Ö‘e   ï¿½&`Pï¿½ 
`Pï¿½ `P&fPï¿½ `P-`Pï¿½ `P&`P*ï¿½ï¿½ï¿½ï¿½`Pï¿½ =`Pï¿½ 
`P+`P /`P.`P/P)`Pï¿½ Pï¿½ `Pï¿½ 
`P,`P+
`P+
`P,
`Pï¿½ `Pï¿½ `Pï¿½ `Pï¿½ `P/`P+
`P+`P/`Pï¿½ `P+
`P+`P%/`Pï¿½ 
`Pï¿½ P4`P*
`Pï¿½ P$`P*
`Pï¿½ P$`P*
`P.`P%.`Pï¿½ `P,`P/`P/P$
&fPï¿½ `P/P$ï¿½ï¿½ï¿½ï¿½`Pï¿½ `Pï¿½ P#ï¿½ï¿½ï¿½ï¿½P,`P-P$	`P*
`P+P$	`P*
`P,P$	`P*`P+Pï¿½ `P-P)P   ï¿½  ï¿½  ï¿½  ï¿½  ï¿½    *         E   ï¿½          ï¿½  =   ï¿½   ï¿½   N                         ï¿½  G   ï¿½   ï¿½   ï¿½ï¿½ ï¿½   ï¿½   ï¿½   ï¿½       o ï¿½ï¿½   ï¿½  ï¿½ I   Ö¶  ï¿½ï¿½ 	`Pï¿½ `P+P)`P,`P#Q  t   t   :                         4ï¿½ ï¿½   ï¿½   ï¿½       ï¿½ %o ï¿½ï¿½   ï¿½  ï¿½ I   Ö¶  ï¿½ï¿½ 	`Pï¿½ `P/P)`P,`P#Q  ï¿½   ï¿½   J                         ï¿½  G   ï¿½   ï¿½   ï¿½ï¿½ ï¿½   ï¿½   ï¿½   ï¿½       o ï¿½ï¿½   ï¿½  ï¿½ I   ÖŸ 	`Pï¿½0ï¿½ `P+P)`P,P    ï¿½	  h	  ï¿½      	          ï¿½      c   d    ï¿½   Ö¶  ï¿½    ï¿½  ï¿½ ï¿½   o I   Ö·   Hï¿½  ï¿½ï¿½ï¿½  ï¿½ï¿½  ï¿½ï¿½  ï¿½ï¿½  ï¿½ï¿½ï¿½  Ö¶ G   ï¿½  ï¿½ï¿½  Ö’   ï¿½   Hï¿½  ï¿½   ï¿½	   Ö·  ï¿½	   ï¿½ï¿½  ï¿½
   ï¿½ ï¿½G   Û·   Ho ï¿½   ï¿½S   ï¿½   ï¿½   ï¿½ï¿½   ï¿½   ï¿½   ï¿½  ï¿½   ï¿½   ï¿½F  ï¿½   ï¿½	   ï¿½z  ï¿½   ï¿½ï¿½  ï¿½   ï¿½  ï¿½   ï¿½   ï¿½  .ï¿½'ï¿½  Ö“   ï¿½   ï¿½  .ï¿½'ï¿½  Ö‘   ï¿½ï¿½  ï¿½(   ï¿½   ï¿½ï¿½  ï¿½   ï¿½   Ö·  .ï¿½'ï¿½  Ö‘   Ö“~  ï¿½   ï¿½  ï¿½   ï¿½    ï¿½
       ï¿½ %o ï¿½ï¿½#   ï¿½  .ï¿½'ï¿½  ï¿½ï¿½ï¿½  ï¿½(   ï¿½'   ï¿½ï¿½  ï¿½   ï¿½)   Ö·  .ï¿½'ï¿½  Ö‘+   Ö“  ï¿½+   ï¿½  ï¿½!   ï¿½-   Ö¶  G   ï¿½G
   Û·  o ï¿½0   ï¿½ï¿½  Ö“ï¿½  ï¿½0   ï¿½  ï¿½   ï¿½2   ï¿½
       ï¿½ %o ï¿½ï¿½5   ï¿½  ï¿½  %ï¿½  %ï¿½  Ö“ï¿½  ï¿½7   ï¿½  G   ï¿½   ï¿½9   ï¿½
       ï¿½ %o ï¿½ï¿½<   ï¿½  I   Ö¶  I   Ö·   H%ï¿½  ï¿½J   ï¿½B   ï¿½   ï¿½ ï¿½G   Û·   H%o ï¿½$   ï¿½H   Ö·   -ï¿½H.ï¿½ï¿½'Kï¿½Ö¶  I   ï¿½N   Ö’N   ï¿½   H%ï¿½  ï¿½&   ï¿½R   ï¿½   ï¿½ ï¿½G   Û·   H%o ï¿½W   ï¿½4   ï¿½X   ï¿½   -ï¿½H.ï¿½ï¿½'Kï¿½Ö¶  ï¿½G   .ï¿½ï¿½'I   ï¿½Ö“ï¿½ï¿½ï¿½ï¿½ï¿½a   ï¿½  ï¿½  %ï¿½   ï¿½d   ï¿½ï¿½  G   ï¿½f   ï¿½   ï¿½g   ï¿½
       ï¿½ %o ï¿½ï¿½j   ï¿½  Ö“    ï¿½j   ï¿½   -ï¿½H.ï¿½ï¿½(Kï¿½ï¿½ï¿½  Ö‘o   ï¿½   -ï¿½H.ï¿½ï¿½'Kï¿½Ö“`ï¿½ï¿½ï¿½ï¿½t   ï¿½  ï¿½w   ï¿½v   ï¿½ï¿½  ï¿½f   ï¿½x   ï¿½ï¿½  ï¿½U   ï¿½z   Ö·  ï¿½  ï¿½ï¿½  ï¿½   ï¿½|   Ö·  .ï¿½'ï¿½  Ö‘~   Ö·  ï¿½  &ï¿½  Ö·  &ï¿½  ï¿½ï¿½  ï¿½ï¿½   ï¿½ï¿½  ï¿½   ï¿½ï¿½   ï¿½ï¿½  ï¿½ï¿½   ï¿½T   ï¿½ï¿½   ï¿½ï¿½  ï¿½-   ï¿½ï¿½   Ö·  ï¿½  ï¿½   ï¿½ï¿½   Ö·  ï¿½  ï¿½  %ï¿½ï¿½   ï¿½   ï¿½ï¿½   ï¿½ï¿½  ï¿½ï¿½   ï¿½   ï¿½ï¿½   ï¿½
       ï¿½ %o ï¿½ï¿½ï¿½   ï¿½  ï¿½  %ï¿½  %ï¿½  Ö¶  ï¿½  ï¿½   ï¿½ï¿½   ï¿½  ï¿½  &ï¿½   ï¿½ï¿½   ï¿½ï¿½   I   ï¿½ï¿½  ï¿½@   ï¿½ï¿½   Ö¶  ï¿½  ï¿½  %ï¿½  &I   ï¿½ï¿½  G   ï¿½   ï¿½ï¿½   Ö¶  I   ï¿½ï¿½   Ö¶  ï¿½  ï¿½   ï¿½ï¿½   ï¿½  ï¿½   ï¿½ï¿½   ï¿½  ï¿½ï¿½   ï¿½  &I   Ö¶  G   ï¿½T   ï¿½ï¿½   Ö¶  ï¿½  ï¿½  G   %I   ï¿½ï¿½  G   ï¿½)   ï¿½ï¿½   ï¿½ï¿½  G   ï¿½   ï¿½ï¿½   Ö¶  I   ï¿½ï¿½   Ö¶  G   ï¿½G
   Ûµ   ï¿½G   ï¿½ï¿½  o s Ö¶  ï¿½  ï¿½   ï¿½ï¿½   Ö·  ï¿½  ï¿½ï¿½   I   Ö·   Hï¿½  &ï¿½  Ö¶  ï¿½    ï¿½  ï¿½ ï¿½   o I   Ö·   Hï¿½ G   ï¿½$   ï¿½ï¿½   ï¿½   ï¿½ ï¿½G   Û·   Ho ï¿½ï¿½   ï¿½ï¿½   ï¿½ï¿½   ï¿½   -ï¿½H.ï¿½ï¿½'Kï¿½ï¿½ï¿½  G   ï¿½   ï¿½ï¿½   Ö¶  I    ï¿½ï¿½   Ö¶  ï¿½    ï¿½  ï¿½ ï¿½   o I!   Ö·   -ï¿½Hï¿½  %KÖ¶  ï¿½    ï¿½  ï¿½ ï¿½   o I"   ï¿½9   ï¿½ï¿½   ï¿½  ï¿½G!   ï¿½  G   %I!   Ö¶  ï¿½G"   ï¿½  G   %I"   ï¿½ï¿½   ÖŸ `P%+`Pï¿½ P) `P+`P'`P&`P&`P&`P'`P-`P&fPï¿½ `Pï¿½ Pï¿½ `Pï¿½ `Pï¿½ `P*`Pï¿½ `P/P)`P-`Pï¿½ `P*`Pï¿½ 
P)`P&`P*`Pï¿½ `P/P)`Pï¿½ `P*`Pï¿½ `P/P)`P*`P*`Pï¿½ P/ï¿½ /fPï¿½0B  ï¿½ ï¿½Pï¿½0 `Pï¿½ ï¿½ 
`Pï¿½ `P/P)`P&`P*`Pï¿½ K  ï¿½  ï¿½`Pï¿½0 W`Pï¿½ )ï¿½ 
.++`Pï¿½ #`P/P)`Pï¿½ `Pï¿½ `Pï¿½ ï¿½ ï¿½ `Pï¿½ `Pï¿½ ï¿½ ï¿½ `Pï¿½ P#ï¿½ï¿½ï¿½ï¿½P$`Pï¿½ `Pï¿½ 	`Pï¿½ P)
`Pï¿½ Pï¿½ ï¿½ ï¿½ ï¿½ P)
#ï¿½ Pï¿½ 9'ï¿½,P  ï¿½	           r          j   ï¿½  ï¿½   ï¿½   P                         ï¿½  ï¿½ I   Öµ    ï¿½  ï¿½   G   s Öµ    ï¿½  s Öµ    ï¿½  s Öµ    ï¿½  s ÖŸ `P,`Pï¿½ P$`P*P$`P+P$`P+P$P   ï¿½	  ï¿½	  ï¿½               ï¿½      ï¿½ï¿½  Ö¶ ï¿½   ï¿½   ï¿½c   d    ï¿½   ï¿½ ï¿½ï¿½  G   ï¿½   ï¿½   ï¿½       o ï¿½ï¿½   ï¿½  ï¿½G   ï¿½g      o ï¿½  Ö¶  ï¿½G   Û·  G   ï¿½ Ho ï¿½ Hï¿½   Ö¶  ï¿½G   Û·  G	   ï¿½ Ho ï¿½ Hï¿½  Ö·   ï¿½}   ï¿½   Ö·  ï¿½n   ï¿½   Ö·  G   G
   ï¿½  G	   G
   ï¿½   ï¿½   ï¿½  ï¿½7   ï¿½   ï¿½  G   G
   ï¿½  G	   G
   ï¿½   ï¿½#   ï¿½ï¿½   ï¿½#   Ö·   ï¿½&   ï¿½$   ï¿½ -ï¿½Hï¿½  G   G
   %Kï¿½0   ï¿½*   ï¿½  ï¿½"   ï¿½+   Ö¶ -ï¿½Hï¿½  G	   G
   %Kï¿½1   Ö¶  ï¿½G   Ûµ   G   ï¿½ Ho ï¿½ Hï¿½2   ï¿½9   ï¿½ -ï¿½Hï¿½   G   G
   %KÖµ
   ï¿½  Ö“ï¿½  ï¿½A   ï¿½  ï¿½  ï¿½ï¿½  ï¿½ï¿½  ï¿½ï¿½  ï¿½ï¿½ï¿½  ï¿½ï¿½  Öµ   G   ï¿½  Öµ   G   ï¿½	  Öµ   G   ï¿½
  ï¿½ï¿½  G   ï¿½   ï¿½J   ï¿½       o ï¿½ï¿½L   ï¿½	  ï¿½G   ï¿½g      o ï¿½	  ï¿½   ï¿½  Ö’N   ï¿½ Hï¿½  G
   ï¿½ï¿½  ï¿½R   ï¿½  ï¿½G   Û¶ Ho ï¿½  Öµ    ï¿½  o ï¿½
  ï¿½ï¿½
  ï¿½   ï¿½Y   ï¿½	ï¿½
  ï¿½Z   ï¿½#   ï¿½[   ï¿½  ï¿½
  %ï¿½  ï¿½ï¿½  Ö“4  ï¿½\   ï¿½  ï¿½  ï¿½G   ï¿½o ï¿½P   ï¿½`   ï¿½  ï¿½   ï¿½a   Ö·  ï¿½a   ï¿½   ï¿½b   ï¿½  ï¿½b   ï¿½     %ï¿½  ï¿½ï¿½  Ö“ï¿½  ï¿½c   ï¿½  ï¿½	  ï¿½G   ï¿½o ï¿½g   ï¿½g   ï¿½   ï¿½	  ï¿½G   ï¿½o ï¿½G   ï¿½k   Ö¶ H%ï¿½  G
   ï¿½+   ï¿½p   ï¿½ï¿½    ï¿½  ï¿½G   Û¶ H%o o ï¿½w   ï¿½;   ï¿½x   ï¿½  ï¿½   ï¿½y   Ö·  ï¿½y   ï¿½   ï¿½z   ï¿½.  ï¿½z   ï¿½  ï¿½z   ï¿½  ï¿½
  ï¿½G   ï¿½o ï¿½F   ï¿½~   ï¿½  ï¿½   ï¿½   ï¿½ï¿½  ï¿½   ï¿½     %ï¿½  ï¿½ï¿½  Ö¶ Hï¿½  Ö“ï¿½  ï¿½ï¿½      ï¿½  ï¿½   ï¿½ï¿½   ï¿½   ï¿½  ï¿½ï¿½   ï¿½Q   ï¿½ï¿½   ï¿½  ï¿½   ï¿½ï¿½   Ö·  ï¿½ H&ï¿½ï¿½   ï¿½   ï¿½ï¿½   ï¿½c  ï¿½ï¿½   ï¿½  ï¿½  %ï¿½  Ö“2  ï¿½ï¿½   ï¿½  G   ï¿½%   ï¿½ï¿½   Ö·  ï¿½   G   ï¿½G   ï¿½o ï¿½ï¿½   ï¿½W   ï¿½ï¿½   ï¿½  ï¿½   ï¿½ï¿½   ï¿½ï¿½   ï¿½ï¿½   dï¿½  Ö·  ï¿½   ï¿½ï¿½   ï¿½ -ï¿½H.ï¿½ï¿½'Kï¿½Ö“ï¿½   ï¿½ï¿½   ï¿½ï¿½   ï¿½ï¿½   ï¿½  G   ï¿½%   ï¿½ï¿½   Ö·  ï¿½   G   ï¿½G   ï¿½o ï¿½ï¿½   ï¿½X   ï¿½ï¿½   ï¿½  ï¿½   ï¿½ï¿½   ï¿½a   ï¿½ï¿½   ï¿½ï¿½  Ö·  ï¿½   ï¿½ï¿½   ï¿½ -ï¿½H.ï¿½ï¿½'Kï¿½Ö“2   ï¿½ï¿½   ï¿½   ï¿½ï¿½   ï¿½   ï¿½ï¿½   ï¿½ -ï¿½H.ï¿½ï¿½'Kï¿½Ö“4ï¿½ï¿½ï¿½ï¿½ï¿½   ï¿½  G   ï¿½   ï¿½ï¿½   Ö·  G   ï¿½  ï¿½ï¿½   Öµ    ï¿½  o ï¿½  *ï¿½  Ö‘ï¿½   ï¿½   ï¿½]   ï¿½ï¿½   ï¿½  ï¿½G   Û·  G   ï¿½ Ho ï¿½ Hï¿½   ï¿½ï¿½   ï¿½   ï¿½ï¿½ï¿½   ï¿½ -ï¿½Hï¿½  G   G
   %KÖ“f   ï¿½ï¿½   ï¿½  ï¿½X   ï¿½ï¿½   ï¿½  ï¿½G   Û·  G    ï¿½ Ho ï¿½ Hï¿½   ï¿½ï¿½   ï¿½   ï¿½ï¿½ï¿½   ï¿½ -ï¿½Hï¿½  G    G
   %KÖ‘ï¿½   ï¿½  ï¿½   ï¿½ï¿½   ï¿½  ï¿½   ï¿½ï¿½   ï¿½  ï¿½ï¿½   ï¿½ï¿½&`Pï¿½ /`Pï¿½ `P+P)`Pï¿½ P'$`Pï¿½ P.`Pï¿½ P.`Pï¿½(Q`Pï¿½ï¿½(4`Pï¿½ Pï¿½ `Pï¿½#`Pï¿½ `P(
`P&`P&`P&`P'`P&`P/`P/`P/`Pï¿½ `P+P)`Pï¿½0E  ï¿½ ï¿½P8  `P*fPï¿½ `Pï¿½ P(`P*P(`Pï¿½ `P&ï¿½ 
`Pï¿½ P.`Pï¿½ `P*`P&`Pï¿½ 
`Pï¿½ Pï¿½ Pï¿½ 'P#ï¿½ï¿½ï¿½ï¿½Pï¿½ `Pï¿½ `Pï¿½ `Pï¿½ P.`P.`P*`P&`P&`Pï¿½ `Pï¿½ `Pï¿½ 
`P*`Pï¿½ 
`Pï¿½ Pï¿½ `Pï¿½ `P*`P'	`P.`P/`Pï¿½ `Pï¿½ Pï¿½ `Pï¿½ `P:`P(	`P.`P/`Pï¿½ `PJ %`Pï¿½0 %`Pï¿½ `P*Pï¿½ `P.`Pï¿½ Pï¿½ `P%y&ï¿½ï¿½ï¿½ï¿½`Pï¿½-`P.`Pï¿½ Pï¿½ `P%-&ï¿½ï¿½ï¿½ï¿½`Pï¿½(`P.	ï¿½ Q  ï¿½	         ï¿½  ï¿½  ï¿½  ï¿½  ,               ï¿½       ï¿½ï¿½  Ö·  G   ï¿½  G   ï¿½   ï¿½   ï¿½       o ï¿½ï¿½   ï¿½    ï¿½  o ï¿½   ï¿½	   ï¿½   G   ï¿½ï¿½   c    ï¿½   ï¿½ï¿½  G   ï¿½   ï¿½   ï¿½  ï¿½   ï¿½   ï¿½  G   ï¿½   ï¿½  ï¿½ï¿½  G	   ï¿½   ï¿½   ï¿½
   ï¿½  Ö“ï¿½   ï¿½   ï¿½   ï¿½G   Û·  o ï¿½  Öµ
    ï¿½  ï¿½  ï¿½   ï¿½   ï¿½   ï¿½   ï¿½    ï¿½  o ï¿½   o G   ï¿½  Öµ
    ï¿½  ï¿½  ï¿½    ï¿½    ï¿½  ï¿½    ï¿½  ï¿½  o o G   o %o ï¿½  Ö‘)   ï¿½    ï¿½  ï¿½  G   o ï¿½  ï¿½ï¿½  ï¿½"   ï¿½/   ï¿½ï¿½  ï¿½   ï¿½1   ï¿½ï¿½  *ï¿½3   ï¿½  ï¿½w   ï¿½4   ï¿½  G   ï¿½&   ï¿½6   ï¿½   ï¿½G   Û·  G   s ï¿½9   ï¿½9   ï¿½   ï¿½G   Û·  G   s Ö·   ï¿½G   Û·  G   s ï¿½?   ï¿½9   ï¿½?   ï¿½   ï¿½G   Û·  G   s Ö·   ï¿½G   Û·  G   s ï¿½E   Öµ    ï¿½  o ï¿½ï¿½  ï¿½H   ï¿½  ï¿½  ï¿½   ï¿½I   ï¿½ï¿½   ï¿½I   ï¿½I   )ï¿½  Ö¶  ï¿½  G   )ï¿½  Ö·  G   ï¿½  ï¿½N   ï¿½  ï¿½  ï¿½ï¿½  ï¿½A   ï¿½P   ï¿½    ï¿½  ï¿½  ï¿½  G   ï¿½   s Öµ    ï¿½  ï¿½   s Ö“ï¿½  ï¿½U   ï¿½   ï¿½G   Ûµ   ï¿½G   Û·  o ï¿½   ï¿½G   ï¿½
o *
Vçž¯ï¿½<%o ï¿½  Öµ    ï¿½  ï¿½  o ï¿½  Ö·  G   ï¿½  ï¿½ï¿½  G    ï¿½   ï¿½g   Ö·  G    ï¿½  G   ï¿½j   ï¿½t   ï¿½k   ï¿½  ï¿½  G    +ï¿½  ï¿½ï¿½  ï¿½   ï¿½o   Ö·  G    ï¿½  %ï¿½  ï¿½q   Öµ    ï¿½  ï¿½  o ï¿½  Ö·  ï¿½  &ï¿½  ï¿½ï¿½  ï¿½z   ï¿½t   ï¿½  G   ï¿½/   ï¿½w   ï¿½  .ï¿½'ï¿½  ï¿½Öµ    ï¿½  ï¿½o ï¿½  ï¿½;   ï¿½{   ï¿½  ï¿½  G   &&ï¿½  Öµ    ï¿½  ï¿½  G   &o ï¿½  ï¿½ï¿½   Öµ    ï¿½  ï¿½  ï¿½  ï¿½   s Öµ    ï¿½  ï¿½  ï¿½   s Ö‘ï¿½   ï¿½(   ï¿½ï¿½   ï¿½    ï¿½  ï¿½  ï¿½  G   ï¿½   s Ö‘ï¿½   ï¿½#   ï¿½ï¿½   ï¿½   ï¿½G   Ûµ   G!   s Ö‘ï¿½   ï¿½  ï¿½ï¿½   ï¿½ï¿½   ï¿½  G"   ï¿½&   ï¿½ï¿½   ï¿½   ï¿½G   Û·  G"   s ï¿½