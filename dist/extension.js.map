{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://meerkat/./src/parse.ts","webpack://meerkat/external commonjs \"vscode\"","webpack://meerkat/webpack/bootstrap","webpack://meerkat/./src/extension.ts"],"sourcesContent":["import * as vscode from 'vscode';\r\n\r\nclass Header {\r\n    protocol: string;\r\n    direction: string;\r\n    source: string;\r\n    sourcePort: string;\r\n    destination: string;\r\n    destinationPort: string;\r\n\r\n    constructor(protocol: string, direction: string, source: string, sourcePort: string, destination: string, destinationPort: string) {\r\n        this.protocol = protocol;\r\n        this.direction = direction;\r\n        this.source = source;\r\n        this.sourcePort = sourcePort;\r\n        this.destination = destination;\r\n        this.destinationPort = destinationPort;\r\n    }\r\n\r\n    toRule(): string {\r\n        return `${this.protocol} ${this.source} ${this.sourcePort} ${this.direction} ${this.destination} ${this.destinationPort}`;\r\n    }\r\n}\r\n\r\nclass Option {\r\n    keyword: string;\r\n    setting?: string;\r\n\r\n    constructor(keyword: string, setting?: string) {\r\n        this.keyword = keyword;\r\n        this.setting = setting;\r\n    }\r\n\r\n    toRule(): string {\r\n        let spaceAfterSemicolomnInOption = vscode.workspace.getConfiguration().get(\"suricata.formatSpaceAfterSemicolomnInOption\") ? ' ' : '';\r\n        return this.setting ? `${this.keyword}:${spaceAfterSemicolomnInOption}${this.setting}` : `${this.keyword}`;\r\n    }\r\n}\r\n\r\nclass Rule {\r\n    action: string;\r\n    header: Header;\r\n    options: Option[];\r\n\r\n    constructor(action: string, header: Header, options: Option[]) {\r\n        this.action = action;\r\n        this.header = header;\r\n        this.options = options;\r\n    }\r\n\r\n    toRule(): string {\r\n        let spaceAfterOption = vscode.workspace.getConfiguration().get(\"suricata.formatSpaceAfterOption\") ? ' ' : '';\r\n        let spaceAfterLastOption = vscode.workspace.getConfiguration().get(\"suricata.formatSpaceAfterLastOption\") ? ' ' : '';\r\n        return `${this.action} ${this.header.toRule()} (${this.options.map(op => op.toRule()).join(`;${spaceAfterOption}`)};${spaceAfterLastOption})`;\r\n    }\r\n}\r\n\r\nexport function parseRule(input: string): Rule {\r\n    let action = parseAction(input);\r\n    let header = parseHeader(input);\r\n    let options = parseOptions(input);\r\n\r\n    return new Rule(action, header, options);\r\n}\r\n\r\nfunction parseAction(input: string): string {\r\n    let firstSpace = input.trim().indexOf(\" \");\r\n    if (firstSpace <= 0)\r\n        throw new Error(\"Invalid rule: no action found!\");\r\n    return input.substring(0, firstSpace).trim();\r\n}\r\n\r\nfunction parseHeader(input: string): Header {\r\n    const IP = /[0-9]{1,3}(.[0-9]{1,3}){3} /;\r\n    const CIDR = /[0-9]{1,3}(.[0-9]{1,3}){3}\\/[0-9]{1,2} /;\r\n    const grouping = /\\[[^\\[]*\\]/;\r\n\r\n    input = input.trim();\r\n    // Grab only header of rule\r\n    let firstSpace = input.indexOf(\" \");\r\n    let secondSpace = input.indexOf(\" \", firstSpace + 1);\r\n    let optionsStart = input.indexOf(\"(\");\r\n    if (optionsStart === null)\r\n        throw new Error(\"Invalid rule: no action found!\");\r\n\r\n    let protocol = input.substring(firstSpace, secondSpace).trim();\r\n    input = input.substring(secondSpace, optionsStart).trim();\r\n\r\n    // Check for direction\r\n    var source, destination;\r\n    var direction;\r\n    if (input.indexOf(\"->\") > 0) {\r\n        [source, destination] = input.split(\"->\");\r\n        direction = \"->\";\r\n    }\r\n    else if (input.indexOf(\"<>\") > 0) {\r\n        [source, destination] = input.split(\"<>\");\r\n        direction = \"<>\";\r\n    }\r\n    else\r\n        throw new Error(\"Invalid rule: no direction found\");\r\n\r\n    // Create rule\r\n    let [sourceIP, sourcePort] = source.trim().split(\" \");\r\n    let [destinationIP, destinationPort] = destination.trim().split(\" \");\r\n\r\n    return new Header(protocol, direction, sourceIP.trim(), sourcePort.trim(), destinationIP.trim(), destinationPort.trim());\r\n}\r\n\r\n\r\ninterface Option {\r\n    keyword: string,\r\n    setting?: string\r\n}\r\nfunction parseOptions(input: string): Option[] {\r\n    let optionsRegex = /[^\\\\]\\(.+[^\\\\]\\)/g;\r\n    let optionsRaw = input.match(optionsRegex);\r\n    if (optionsRaw === null)\r\n        throw new Error(\"Invalid rule: no options found!\");\r\n    let options = optionsRaw[0].trim().substring(1, optionsRaw[0].length - 2).trim().split(\";\"); // get all options\r\n    options.pop(); // remove last element\r\n\r\n    return options.map<Option>(op => {\r\n        if (op.indexOf(\":\") > 0) { // the keyword is of type <keyword>: <settings>;\r\n            let split = op.indexOf(\":\");\r\n            let keyword = op.substring(0, split);\r\n            let settings = op.substring(split + 1);\r\n            return new Option(keyword.trim(), settings.trim());\r\n        }\r\n        // else it is a Modifier Keywords (<keyword>;)\r\n        return new Option(op.trim());\r\n    })\r\n}","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\nimport { parseRule } from './parse';\n\nexport function activate(context: vscode.ExtensionContext) {\n\tconsole.log('Meerkat is active!');\n\n\tlet hello = vscode.commands.registerCommand('meerkat.hello', () => {\n\t\tvscode.window.showInformationMessage('Meerkat: Hi!');\n\t});\n\tcontext.subscriptions.push(hello);\n\n\t\n}\n\nvscode.languages.registerDocumentFormattingEditProvider('suricata', {\n\tprovideDocumentFormattingEdits(document: vscode.TextDocument): vscode.TextEdit[] {\n\t\tvar ret = [];\n\t\tvar error: number[] = [];\n\t\tvar linesToFormat: IterableIterator<number>;\n\n\t\tif (vscode.workspace.getConfiguration().get(\"suricata.formatActiveLineOnly\")) {\n\t\t\tlet activeTextEditor = vscode.window.activeTextEditor;\n\t\t\tif (!activeTextEditor) {\n\t\t\t\tvscode.window.showErrorMessage(`Meerkat: Please select a line to format first`);\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tlinesToFormat = Array.from<number>([activeTextEditor.selection.active.line]).values();\n\t\t}\n\t\telse {\n\t\t\tlinesToFormat = Array<number>(document.lineCount).keys();\n\t\t}\n\t\tfor (const lineNum of linesToFormat) {\n\t\t\tlet line = document.lineAt(lineNum);\n\t\t\ttry {\n\t\t\t\tif (line.text.length === 0 || line.text.startsWith(\"#\")) // commented out rules\n\t\t\t\t\tcontinue;\n\t\t\t\tlet formatted = parseRule(line.text);\n\t\t\t\tret.push(vscode.TextEdit.replace(line.range, formatted.toRule()));\n\t\t\t} catch (err) {\n\t\t\t\terror.push(lineNum);\n\t\t\t}\n\t\t}\n\t\tif (error.length !== 0)\n\t\t\tvscode.window.showErrorMessage(`Meerkat: Could not parse rules on lines [${error}]`);\n\t\telse\n\t\t\tvscode.window.showInformationMessage(`Meerkat: Successfully formatted ${ret.length} lines`);\n\t\treturn ret;\n\t}\n});\n"],"names":["Header","constructor","protocol","direction","source","sourcePort","destination","destinationPort","this","toRule","Option","keyword","setting","spaceAfterSemicolomnInOption","vscode","workspace","getConfiguration","get","Rule","action","header","options","spaceAfterOption","spaceAfterLastOption","map","op","join","input","firstSpace","trim","indexOf","Error","substring","parseAction","secondSpace","optionsStart","split","sourceIP","destinationIP","parseHeader","optionsRaw","match","length","pop","settings","parseOptions","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","console","log","hello","commands","registerCommand","window","showInformationMessage","subscriptions","push","languages","registerDocumentFormattingEditProvider","provideDocumentFormattingEdits","document","linesToFormat","ret","error","activeTextEditor","showErrorMessage","Array","from","selection","active","line","values","lineCount","keys","lineNum","lineAt","text","startsWith","formatted","parseRule","TextEdit","replace","range","err"],"sourceRoot":""}