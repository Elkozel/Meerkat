# This file is a template, and might need editing before it works on your project.
# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/rust/tags/
image: "rust:latest"
stages:
    - build client
    - check rust
    - package & deploy
    - test deploy

before_script:
    # install nvm
    - "curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.3/install.sh | bash"
    # source bash
    - "source ~/.bashrc"
    # install npm and node
    - "nvm install node"
    # install project
    - "npm install"

# Use npm to build the project
# This is skipped on the main branch
build_client:
    stage: build client
    script:
        - npx tsc -b
    rules:
        - if: '$CI_COMMIT_REF_NAME != "master" && $CI_COMMIT_REF_NAME != "test-cross-compilation"'

# Use cargo to check server
# This is skipped on the main branch
check_rust:
    stage: check rust
    script:
        - cargo check
    rules:
        - if: '$CI_COMMIT_REF_NAME != "master" && $CI_COMMIT_REF_NAME != "test-cross-compilation"'

# Use vscode package tool to package the extenssion
# This rule is only active on the main branch
package&deploy:
    stage: package & deploy
    script:
        - npx vsce package
    rules:
        - if: '$CI_COMMIT_REF_NAME == "master"'

# test_deploy:
#     stage: test deploy
#     script:
#         # Update apt
#         - apt update && apt upgrade -y 
#         # Install docker
#         - apt install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common > /dev/null
#         - curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
#         - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
#         - apt update
#         - apt install -y docker-ce > /dev/null
#         # Install cross
#         - cargo install cross --git https://github.com/cross-rs/cross
#         - cross build --target x86_64-pc-windows-gnu
#         - cross build --target x86_64-unknown-linux-gnu
#         - cross build --target aarch64-unknown-linux-gnu
#         - cross build --target i686-unknown-linux-gnu
#         - cross build --target i686-pc-windows-gnu
#     rules:
#         - if: '$CI_COMMIT_REF_NAME == "test-cross-compilation"'
#     artifacts:
#         name: "Compiled stuff"
#         paths:
#             - target/

variables:
    # the host where the docker instance is running
    DOCKER_HOST: tcp://docker:2375/
    # use for much faster builds
    DOCKER_DRIVER: overlay2
    # ensure cross knows it's running remotely
    CROSS_REMOTE: 1

services:
    - docker:18.09-dind

test_deploy:
    stage: test deploy
    script:
        - cross test --target arm-unknown-linux-gnueabihf
    rules:
        - if: '$CI_COMMIT_REF_NAME == "test-cross-compilation"'