# This file is a template, and might need editing before it works on your project.
# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/rust/tags/
image: "rust:latest"
stages:
    - build client
    - check rust
    - package & deploy
    - test windows

before_script:
    # install nvm
    - "curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.3/install.sh | bash"
    # source bash
    - "source ~/.bashrc"
    # install npm and node
    - "nvm install node"
    # install project
    - "npm install"

# Use npm to build the project
# This is skipped on the main branch
build_client:
    stage: build client
    script:
        - npx tsc -b
    rules:
        - if: '$CI_COMMIT_REF_NAME != "master" && $CI_COMMIT_REF_NAME != "test-cross-compilation"'

# Use cargo to check server
# This is skipped on the main branch
check_rust:
    stage: check rust
    script:
        - cargo check
    rules:
        - if: '$CI_COMMIT_REF_NAME != "master" && $CI_COMMIT_REF_NAME != "test-cross-compilation"'

# Use vscode package tool to package the extenssion
# This rule is only active on the main branch
package&deploy:
    stage: package & deploy
    script:
        - npx vsce package
    rules:
        - if: '$CI_COMMIT_REF_NAME == "master"'

# See if solution from the internet works
test_windows:
    stage: test windows
    script:
        - apt update && apt upgrade -y 
        - apt install -y g++-mingw-w64-x86-64 
        - rustup target add x86_64-pc-windows-gnu 
        - rustup toolchain install stable-x86_64-pc-windows-gnu 
        - cargo build --target x86_64-pc-windows-gnu
    rules:
        - if: '$CI_COMMIT_REF_NAME == "test-cross-compilation"'

