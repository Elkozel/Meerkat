# This file is a template, and might need editing before it works on your project.
# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/rust/tags/
image: "rust:latest"
stages:
    - build client
    - check rust
    - package & deploy
    - test deploy

before_script:
    # install nvm
    - "curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.3/install.sh | bash"
    # source bash
    - "source ~/.bashrc"
    # install npm and node
    - "nvm install node"
    # install project
    - "npm install"

# Use npm to build the project
# This is skipped on the main branch
build_client:
    stage: build client
    script:
        - npx tsc -b
    rules:
        - if: '$CI_COMMIT_REF_NAME != "master" && $CI_COMMIT_REF_NAME != "test-cross-compilation"'

# Use cargo to check server
# This is skipped on the main branch
check_rust:
    stage: check rust
    script:
        - cargo check
    rules:
        - if: '$CI_COMMIT_REF_NAME != "master" && $CI_COMMIT_REF_NAME != "test-cross-compilation"'

# Use vscode package tool to package the extenssion
# This rule is only active on the main branch
package&deploy:
    stage: package & deploy
    script:
        - npx vsce package
    rules:
        - if: '$CI_COMMIT_REF_NAME == "master"'
test_deploy:
    # stage: test windows old way
    # script:
    #     - apt update && apt upgrade -y 
    #     - apt install -y g++-mingw-w64-x86-64 
    #     - rustup toolchain install stable-x86_64-pc-windows-gnu
    #     - rustup target add x86_64-pc-windows-gnu 
    #     - rustup target add x86_64-unknown-linux-gnu
    #     - rustup target add aarch64-unknown-linux-gnu
    #     - rustup target add i686-unknown-linux-gnu
    #     - rustup target add i686-pc-windows-gnu
    #     - cargo build --target x86_64-pc-windows-gnu
    #     - cargo build --target x86_64-unknown-linux-gnu
    #     - cargo build --target aarch64-unknown-linux-gnu
    #     - cargo build --target i686-unknown-linux-gnu
    #     - cargo build --target i686-pc-windows-gnu
    # rules:
    #     - if: '$CI_COMMIT_REF_NAME == "test-cross-compilation"'

    stage: test windows
    script:
        # Update apt
        - apt update && apt upgrade -y 
        # Install docker
        - curl -fsSL https://get.docker.com -o get-docker.sh
        - sudo sh get-docker.sh
        # Install cross
        - cargo install cross --git https://github.com/cross-rs/cross
        - cross build --target x86_64-pc-windows-gnu
        - cross build --target x86_64-unknown-linux-gnu
        - cross build --target aarch64-unknown-linux-gnu
        - cross build --target i686-unknown-linux-gnu
        - cross build --target i686-pc-windows-gnu
    rules:
        - if: '$CI_COMMIT_REF_NAME == "test-cross-compilation"'
    artifacts:
        name: "Compiled stuff"
        paths:
            - target/

# test_deploy:
#     stage: preparation
#     script:
#         # Update apt
#         - apt update && apt upgrade -y 
#         # Install docker
#         - curl -fsSL https://get.docker.com -o get-docker.sh
#         - sudo sh get-docker.sh
#         # Install cross
#         -  cargo install cross --git https://github.com/cross-rs/cross
#     rules:
#         - if: '$CI_COMMIT_REF_NAME == "test-cross-compilation"'
# 
#     stage: compile x64 Windows binary
#     script:
#         - cross build --target x86_64-pc-windows-gnu
#     rules:
#         - if: '$CI_COMMIT_REF_NAME == "test-cross-compilation"'
# 
#     stage: compile x64 Linux binary
#     script:
#         - cross build --target x86_64-unknown-linux-gnu
#     rules:
#         - if: '$CI_COMMIT_REF_NAME == "test-cross-compilation"'
# 
#     stage: compile arch64 Linux binary
#     script:
#         - cross build --target aarch64-unknown-linux-gnu
#     rules:
#         - if: '$CI_COMMIT_REF_NAME == "test-cross-compilation"'
# 
#     stage: compile i686 Linux binary
#     script:
#         - cross build --target i686-unknown-linux-gnu
#     rules:
#         - if: '$CI_COMMIT_REF_NAME == "test-cross-compilation"'
# 
#     stage: compile i686 Windows binary
#     script:
#         - cross build --target i686-pc-windows-gnu
#     rules:
#         - if: '$CI_COMMIT_REF_NAME == "test-cross-compilation"'
    

